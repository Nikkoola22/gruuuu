import React, { useState, useEffect } from "react";

interface InfoItem {
  id: number;
  title: string;
  content: string;
}

const AdminInfo: React.FC = () => {
  const [infoItems, setInfoItems] = useState<InfoItem[]>([]);
  const [newInfo, setNewInfo] = useState({ title: "", content: "" });
  const [editingId, setEditingId] = useState<number | null>(null);

  useEffect(() => {
    // Charger les donn√©es depuis le localStorage ou utiliser les donn√©es par d√©faut
    const savedInfo = localStorage.getItem('cfdt-info-items');
    if (savedInfo) {
      setInfoItems(JSON.parse(savedInfo));
    } else {
      // Donn√©es par d√©faut
      const defaultInfo: InfoItem[] = [
        {
          id: 1,
          title: "Accident de trajet : o√π commence le trajet domicile-travail lorsqu'un agent r√©side dans un immeuble collectif ?",
          content: "Le trajet domicile-travail commence d√®s la sortie de l'immeuble collectif o√π r√©side l'agent. Cela inclut les parties communes de l'immeuble (hall, escaliers, ascenseur) jusqu'√† la voie publique. En cas d'accident dans ces espaces communs, celui-ci peut √™tre reconnu comme accident de trajet si l'agent se rendait effectivement au travail ou en revenait."
        },
        {
          id: 2,
          title: "Un fonctionnaire territorial peut-il demander une mutation tout en √©tant en disponibilit√© ?",
          content: "Dans la fonction publique territoriale, un fonctionnaire plac√© en disponibilit√© ne peut pas √™tre mut√© directement puisqu'il n'est pas en position d'activit√©. Toutefois, il lui reste possible de pr√©parer sa mobilit√© et de poser sa candidature √† une mutation, √† condition de respecter la proc√©dure adapt√©e. Ce cadre juridique doit √™tre bien compris par les services RH afin d'accompagner correctement les agents."
        },
        {
          id: 3,
          title: "Repenser le recrutement pour une fonction publique plus inclusive.",
          content: "La fonction publique territoriale s'engage vers plus d'inclusivit√© en diversifiant ses m√©thodes de recrutement. Cela passe par l'adaptation des √©preuves pour les personnes en situation de handicap, la valorisation de l'exp√©rience professionnelle via la reconnaissance des acquis, et le d√©veloppement de parcours d'insertion pour favoriser l'√©galit√© des chances dans l'acc√®s aux emplois publics."
        },
        {
          id: 4,
          title: "Entretien avec son chef: accident de service?.",
          content: "La circonstance qu'un chef de service, recevant en entretien individuel l'un de ses agents, ait pu adresser √† ce dernier plusieurs reproches sur sa mani√®re de servir et s'√©nerver en lui reprochant notamment ¬´ tricher sur ses horaires de travail ¬ª, n'est pas constitutive d'un accident de service, d√®s lors que la restitution de cet entretien par l'int√©ress√© ne fait apparaitre aucun propos ou comportement exc√©dant l'exercice normal du pouvoir hi√©rarchique de ce sup√©rieur.TA Besan√ßon 2400131 du 19.06.2025."
        },
        {
          id: 5,
          title: "Sanction: Utilisation WhatApp.",
          content: "La circonstance qu'un agent ait envoy√© depuis son t√©l√©phone personnel et sa messagerie WhatsApp, √† l'attention de plusieurs personnes, dont des √©lus, des photos montages assortis de sous-titre d√©shonorants √† l'encontre de la maire de la ville et de son troisi√®me adjoint, pr√©sente un caract√®re fautif et non humoristique, compte-tenu de la nature des photographies diffus√©es et des personnes vis√©es par ces montages. Par suite, le comportement de l'int√©ress√© constitue un manquement √† son obligation de dignit√©, de r√©serve de probit√©, d'int√©grit√© et de loyaut√©, justifiant son exclusion de fonctions durant deux ans. La circonstance que les messages incrimin√©s soient provenus de la messagerie priv√©e de l'int√©ress√© et en dehors du service est sans incidence d√®s lors que le comportement d'un agent public peut avoir pour effet de perturber le service ou de jeter le discr√©dit sur l'administration, comme en l'esp√®ce.TA Cergy-Pontoise 2201748 du 09.07.2025."
        }
      ];
      setInfoItems(defaultInfo);
      localStorage.setItem('cfdt-info-items', JSON.stringify(defaultInfo));
    }
  }, []);

  const saveInfoItems = (items: InfoItem[]) => {
    setInfoItems(items);
    localStorage.setItem('cfdt-info-items', JSON.stringify(items));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (editingId) {
      // Modification
      const updatedItems = infoItems.map(item =>
        item.id === editingId ? { ...newInfo, id: editingId } : item
      );
      saveInfoItems(updatedItems);
    } else {
      // Ajout
      const newId = Math.max(...infoItems.map(item => item.id), 0) + 1;
      const updatedItems = [...infoItems, { ...newInfo, id: newId }];
      saveInfoItems(updatedItems);
    }
    setNewInfo({ title: "", content: "" });
    setEditingId(null);
  };

  const handleEdit = (item: InfoItem) => {
    setNewInfo({ title: item.title, content: item.content });
    setEditingId(item.id);
  };

  const handleDelete = (id: number) => {
    const updatedItems = infoItems.filter(item => item.id !== id);
    saveInfoItems(updatedItems);
  };

  const handleMoveUp = (id: number) => {
    const index = infoItems.findIndex(item => item.id === id);
    if (index > 0) {
      const newItems = [...infoItems];
      [newItems[index - 1], newItems[index]] = [newItems[index], newItems[index - 1]];
      saveInfoItems(newItems);
    }
  };

  const handleMoveDown = (id: number) => {
    const index = infoItems.findIndex(item => item.id === id);
    if (index < infoItems.length - 1) {
      const newItems = [...infoItems];
      [newItems[index], newItems[index + 1]] = [newItems[index + 1], newItems[index]];
      saveInfoItems(newItems);
    }
  };

  return (
    <div style={{ padding: "2rem" }}>
      <h1>üì∞ Administration des informations NEWS FPT</h1>
      <p style={{ color: "#666", marginBottom: "2rem" }}>
        G√©rez les informations qui apparaissent dans le bandeau d√©roulant "NEWS FPT"
      </p>
      
      <form onSubmit={handleSubmit} style={{ marginBottom: "2rem", background: "#f9f9f9", padding: "1.5rem", borderRadius: "8px" }}>
        <h2>{editingId ? "Modifier" : "Ajouter"} une information</h2>
        <div style={{ marginBottom: "1rem" }}>
          <label style={{ display: "block", marginBottom: "0.5rem", fontWeight: "bold" }}>
            Titre (affich√© dans le bandeau) :
          </label>
          <input
            type="text"
            placeholder="Titre de l'information"
            value={newInfo.title}
            onChange={(e) => setNewInfo({ ...newInfo, title: e.target.value })}
            style={{ width: "100%", padding: "0.75rem", border: "1px solid #ddd", borderRadius: "4px" }}
            required
          />
        </div>
        <div style={{ marginBottom: "1rem" }}>
          <label style={{ display: "block", marginBottom: "0.5rem", fontWeight: "bold" }}>
            Contenu d√©taill√© (affich√© dans la popup) :
          </label>
          <textarea
            placeholder="Contenu d√©taill√© de l'information"
            value={newInfo.content}
            onChange={(e) => setNewInfo({ ...newInfo, content: e.target.value })}
            style={{ width: "100%", padding: "0.75rem", border: "1px solid #ddd", borderRadius: "4px", height: "120px" }}
            required
          />
        </div>
        <div style={{ display: "flex", gap: "0.5rem" }}>
          <button type="submit" style={{ padding: "0.75rem 1.5rem", background: "#007bff", color: "white", border: "none", borderRadius: "4px", cursor: "pointer" }}>
            {editingId ? "Modifier" : "Ajouter"}
          </button>
          {editingId && (
            <button
              type="button"
              onClick={() => {
                setNewInfo({ title: "", content: "" });
                setEditingId(null);
              }}
              style={{ padding: "0.75rem 1.5rem", background: "#6c757d", color: "white", border: "none", borderRadius: "4px", cursor: "pointer" }}
            >
              Annuler
            </button>
          )}
        </div>
      </form>

      <div>
        <h2>Informations existantes ({infoItems.length})</h2>
        {infoItems.length === 0 ? (
          <p style={{ color: "#666", fontStyle: "italic" }}>Aucune information pour le moment.</p>
        ) : (
          <div style={{ display: "flex", flexDirection: "column", gap: "1rem" }}>
            {infoItems.map((item, index) => (
              <div
                key={item.id}
                style={{
                  border: "1px solid #ddd",
                  borderRadius: "8px",
                  padding: "1rem",
                  background: "white",
                  boxShadow: "0 2px 4px rgba(0,0,0,0.1)"
                }}
              >
                <div style={{ display: "flex", justifyContent: "space-between", alignItems: "flex-start", marginBottom: "0.5rem" }}>
                  <div style={{ flex: 1 }}>
                    <h3 style={{ margin: "0 0 0.5rem 0", color: "#333" }}>
                      #{item.id}: {item.title}
                    </h3>
                    <p style={{ margin: "0", color: "#666", fontSize: "0.9em", lineHeight: "1.4" }}>
                      {item.content.length > 150 ? `${item.content.substring(0, 150)}...` : item.content}
                    </p>
                  </div>
                  <div style={{ display: "flex", flexDirection: "column", gap: "0.25rem", marginLeft: "1rem" }}>
                    <button
                      onClick={() => handleEdit(item)}
                      style={{ padding: "0.25rem 0.5rem", background: "#28a745", color: "white", border: "none", borderRadius: "4px", cursor: "pointer", fontSize: "0.8em" }}
                    >
                      Modifier
                    </button>
                    <button
                      onClick={() => handleDelete(item.id)}
                      style={{ padding: "0.25rem 0.5rem", background: "#dc3545", color: "white", border: "none", borderRadius: "4px", cursor: "pointer", fontSize: "0.8em" }}
                    >
                      Supprimer
                    </button>
                    <div style={{ display: "flex", gap: "0.25rem" }}>
                      <button
                        onClick={() => handleMoveUp(item.id)}
                        disabled={index === 0}
                        style={{ padding: "0.25rem 0.5rem", background: index === 0 ? "#ccc" : "#17a2b8", color: "white", border: "none", borderRadius: "4px", cursor: index === 0 ? "not-allowed" : "pointer", fontSize: "0.8em" }}
                      >
                        ‚Üë
                      </button>
                      <button
                        onClick={() => handleMoveDown(item.id)}
                        disabled={index === infoItems.length - 1}
                        style={{ padding: "0.25rem 0.5rem", background: index === infoItems.length - 1 ? "#ccc" : "#17a2b8", color: "white", border: "none", borderRadius: "4px", cursor: index === infoItems.length - 1 ? "not-allowed" : "pointer", fontSize: "0.8em" }}
                      >
                        ‚Üì
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default AdminInfo;
